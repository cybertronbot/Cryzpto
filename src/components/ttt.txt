import React, { useState, useRef, useEffect } from "react";
import { FaCheck, FaTimes, FaInfoCircle } from "react-icons/fa";
import axios from "axios";

const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;
const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;
const EMAIL_REGEX = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
const REGISTER_URL = "https://authendpoints.onrender.com/api/auth/signup";

const Signup = () => {
33333
  return (
    <div className="body">
      {success ? (
        <section>
          <h1>Success!</h1>
          <p>
            <a href="#">Sign In</a>
          </p>
        </section>
      ) : (
        <div className="card">
          <form action="" onSubmit={handleSubmit}>
            <p
              ref={errRef}
              className={errMsg ? "errmsg" : "offscreen"}
              aria-live="assertive"
            >
              {errMsg}
            </p>
            <h1>Get started</h1>
            <p>
              Signing up takes only a few seconds. It's the first step towards a
              safer, more organized life.
            </p>

            <div>
              <label htmlFor="fullName">
                First Name:
                <FaCheck className={validFullName ? "valid" : "hide"} />
                <FaTimes
                  className={validFullName || !fullName ? "hide" : "invalid"}
                />
              </label>
              <input
                type="text"
                id="fullname"
                ref={userFullName}
                autoComplete="off"
                onChange={(e) => setFullName(e.target.value)}
                value={fullName}
                required
                aria-invalid={validFullName ? "false" : "true"}
                aria-describedby="uidnote"
                onFocus={() => setFullNameFocus(true)}
                onBlur={() => setFullNameFocus(false)}
              />
              <p
                id="uidnote"
                className={
                  fullNameFocus && fullName && !validFullName
                    ? "instructions"
                    : "offscreen"
                }
              >
                <FaInfoCircle />
                4 to 24 characters.
                <br />
                Must begin with a letter.
                <br />
                Letters, numbers, underscores, hyphens allowed.
              </p>
            </div>

            <div>
              <label htmlFor="username">
                LastName:
                <FaCheck className={validUsername ? "valid" : "hide"} />
                <FaTimes
                  className={validUsername || !username ? "hide" : "invalid"}
                />
              </label>
              <input
                type="text"
                id="username"
                autoComplete="off"
                onChange={(e) => setUsername(e.target.value)}
                value={username}
                required
                aria-invalid={validUsername ? "false" : "true"}
                aria-describedby="uidnote"
                onFocus={() => setUsernameFocus(true)}
                onBlur={() => setUsernameFocus(false)}
              />
              <p
                id="uidnote"
                className={
                  userNameFocus && username && !validUsername
                    ? "instructions"
                    : "offscreen"
                }
              >
                <FaInfoCircle />
                4 to 24 characters.
                <br />
                Must begin with a letter.
                <br />
                Letters, numbers, underscores, hyphens allowed.
              </p>
            </div>
            <div>
              <label htmlFor="email">
                Email:
                <FaCheck className={validEmail ? "valid" : "hide"} />
                <FaTimes
                  className={validEmail || !email ? "hide" : "invalid"}
                />
              </label>
              <input
                type="email"
                id="email"
                autoComplete="off"
                onChange={(e) => setEmail(e.target.value)}
                value={email}
                required
                aria-invalid={validEmail ? "false" : "true"}
                aria-describedby="uidnote"
                onFocus={() => setEmailFocus(true)}
                onBlur={() => setEmailFocus(false)}
              />
              <p
                id="uidnote"
                className={
                  emailFocus && email && !validEmail
                    ? "instructions"
                    : "offscreen"
                }
              >
                <FaInfoCircle />
                4 to 24 characters.
                <br />
                Must begin with a letter.
                <br />
                Letters, numbers, underscores, hyphens allowed.
              </p>
            </div>

            <div>
              <label htmlFor="password">
                Password:
                <FaCheck className={validPwd ? "valid" : "hide"} />
                <FaTimes className={validPwd || !pwd ? "hide" : "invalid"} />
              </label>
              <input
                type="password"
                id="password"
                onChange={(e) => setPwd(e.target.value)}
                value={pwd}
                required
                aria-invalid={validPwd ? "false" : "true"}
                aria-describedby="pwdnote"
                onFocus={() => setPwdFocus(true)}
                onBlur={() => setPwdFocus(false)}
              />
              <p
                id="pwdnote"
                className={pwdFocus && !validPwd ? "instructions" : "offscreen"}
              >
                <FaInfoCircle />
                8 to 24 characters.
                <br />
                Must include uppercase and lowercase letters, a number and a
                special character.
                <br />
                Allowed special characters:{" "}
                <span aria-label="exclamation mark">!</span>{" "}
                <span aria-label="at symbol">@</span>{" "}
                <span aria-label="hashtag">#</span>{" "}
                <span aria-label="dollar sign">$</span>{" "}
                <span aria-label="percent">%</span>
              </p>
            </div>

            <button
              disabled={
                !validFullName || !validUsername || !validPwd || !validEmail
                  ? true
                  : false
              }
            >
              Create Account
            </button>

            {/* <h3>Join the ExpiReminder Community Today!</h3> */}
            <small>
              ExpiReminder is trusted by thousands of users worldwide, and our
              commitment to your privacy and data security is unwavering.
            </small>
          </form>
        </div>
      )}
    </div>
  );
};

export default Signup;




import { useRef, useState, useEffect } from "react";

import { Link, useNavigate } from "react-router-dom";

import React from "react";

import axios from "axios";
const LOGIN_URL = "https://authendpoints.onrender.com/api/auth/login";

const Login = () => {
  const navigate = useNavigate(); // Use the useHistory hook
  const emailRef = useRef();
  const errRef = useRef();

  const [email, setEmail] = useState("");
  const [pwd, setPwd] = useState("");
  const [errMsg, setErrMsg] = useState("");

  useEffect(() => {
    emailRef.current.focus();
  }, []);

  useEffect(() => {
    setErrMsg("");
  }, [email, pwd]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post(
        LOGIN_URL,
        JSON.stringify({ email, password: pwd }),
        {
          headers: { "Content-Type": "application/json" },
        }
      );
      console.log(JSON.stringify(response?.data));
      console.log(JSON.stringify(response));

      setEmail("");
      setPwd("");
      navigate("/dashboard");
    } catch (err) {
      if (!err?.response) {
        setErrMsg("No Server Response");
      } else if (err.response?.status === 400) {
        setErrMsg("Missing Username or Password");
      } else if (err.response?.status === 401) {
        setErrMsg("Unauthorized");
      } else {
        setErrMsg("Login Failed");
      }
      errRef.current.focus();
    }
  };

  return (
    <div className="w-full h-screen flex item-start">
      <form
        className="w-1/2 h-full bg-[#f5f5f5] flex flex-col p-10 justify-between items-center"
        onSubmit={handleSubmit}
      >
        <p
          ref={errRef}
          className={errMsg ? "errmsg" : "offscreen"}
          aria-live="assertive"
        >
          {errMsg}
        </p>

        <div className="w-full flex flex-col max-w-[500px]">
          <div className="flex flex-col w-full mb-2">
            <h3 className="text-4xl font-semibold mb-2">Login</h3>
            <p className="text-sm mb-2">
              Welcome back! Please enter your details
            </p>
          </div>

          <label htmlFor="email">Username:</label>
          <input
            type="text"
            id="email"
            ref={emailRef}
            autoComplete="off"
                  className="sm:h-[48px] h-[42px] pl-2 outline-none w-[100%] text-[#FFF]  bg-[#141414] rounded-lg"
            onChange={(e) => setEmail(e.target.value)}
            value={email}
            required
          />

          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            onChange={(e) => setPwd(e.target.value)}
            value={pwd}
            required
          />

          <div className="w-full flex items-center justify-between">
            <div className="w-full flex items-center">
              <input type="checkbox" name="" className="w-4 h-4 mr-2" />
              <p className="text-sm">Remember me</p>
            </div>

            <p className="text-sm font-bold whitespace-nowrap cursor-pointer underline hover:text-[#FF7F00] underline-offset-2">
              Forgot Password
            </p>
          </div>

          <div className="w-full flex flex-col my-4">
            <button className="w-full my-2 bg-[#131a4e] rounded-md p-4 text-center font-semibold hover:bg-[#FF7F00] text-white">
              Log in
            </button>
          </div>

          <div className="w-full flex justify-center items-center relative py-2">
            <div className="w-full h-[1px] bg-black"></div>
            <p className="text-xl absolute text-black/80 bg-[#f5f5f5]">or</p>
          </div>

          <div className="w-full my-2 bg-[white] flex items-center justify-center rounded-md p-4 hover:text-[#FF7F00] text-center font-semibold border border-[darkBlue]/10 text-[darkBlue] cursor-pointer">
            {/* <img src={googleImg} alt="google-icon" className="mr-2 h-6"/>*/}
            Sign In with google
          </div>
        </div>

        <div className="w-full flex items-center justify-center">
          <p className="text-sm font-normal text-[darkBlue]">
            Don't have an account?{" "}
            <Link to="/signup">
              <span className="underline font-semibold hover:text-[#FF7F00] cursor-pointer underline-offset-2">
                Sign up for free
              </span>
            </Link>
          </p>
        </div>
      </form>
    </div>
  );
};

export default Login;
